import Axios, { AxiosInstance, Method } from 'axios';

import {
    appClientOptionsSchema,
    type AppClientOptions,
    type AuthStrategy,
    type RequestOptions,
    GenerateAccessTokenResponse,
    APP_SCOPES_ALL,
    GenerateAccessTokenResult
} from '../contracts';
import { hexToBase64Url, parseBase64Object } from '../utils';

const URL_CHATHQ_API = 'https://portal-api.chathq.io';

function defaultStrategy(this: ChatHQAppClientBase, tokenOrApiKey?: string) {
    return {
        authorization: `Bearer ${tokenOrApiKey}`,
        'x-client-id': this.appClientId,
        'x-client-secret': this.appClientSecret
    };
}

export abstract class ChatHQAppClientBase {
    //#region Protected Properties

    protected readonly http: AxiosInstance;
    protected readonly appClientId: string;
    protected readonly appClientSecret: string;
    protected readonly authStrategy: AuthStrategy;

    protected scope: string[];

    //#endregion Protected Properties

    //#region Constructor

    protected constructor(options: AppClientOptions) {
        const {
            appClientId,
            appClientSecret,
            baseUrl = URL_CHATHQ_API,
            authStrategy = defaultStrategy,
            extraHeaders = {}
        } = appClientOptionsSchema.parse(options) as AppClientOptions;

        this.appClientId = appClientId;
        this.appClientSecret = appClientSecret;
        this.authStrategy = authStrategy.bind(this);
        this.http = Axios.create({
            baseURL: baseUrl,
            headers: {
                'content-type': 'application/json',
                accept: 'application/json',
                ...extraHeaders
            }
        });
    }

    //#endregion Constructor

    //#region Raw HTTP Methods

    protected async request<TData = any>(
        method: Method,
        endpoint: string,
        apiKey?: string,
        { headers: extraHeaders, ...options }: RequestOptions = {}
    ) {
        const response = this.http.request<TData>({
            ...options,
            method,
            url: endpoint,
            headers: {
                ...this.authStrategy(apiKey),
                ...extraHeaders
            }
        });

        return response;
    }

    protected async get<TData = any>(
        endpoint: string,
        apiKey?: string,
        { headers: extraHeaders, ...options }: RequestOptions = {}
    ) {
        const response = await this.http.get<TData>(endpoint, {
            ...options,
            headers: {
                ...this.authStrategy(apiKey),
                ...extraHeaders
            }
        });

        return response;
    }

    protected async post<TData = any>(
        endpoint: string,
        apiKey?: string,
        data?: unknown,
        { headers: extraHeaders, ...options }: RequestOptions = {}
    ) {
        const response = await this.http.post<TData>(endpoint, data, {
            ...options,
            headers: {
                ...this.authStrategy(apiKey),
                ...extraHeaders
            }
        });

        return response;
    }

    protected async put<TData = any>(
        endpoint: string,
        apiKey?: string,
        data?: unknown,
        { headers: extraHeaders, ...options }: RequestOptions = {}
    ) {
        const response = await this.http.put<TData>(endpoint, data, {
            ...options,
            headers: {
                ...this.authStrategy(apiKey),
                ...extraHeaders
            }
        });

        return response;
    }

    protected async patch<TData = any>(
        endpoint: string,
        apiKey?: string,
        data?: unknown,
        { headers: extraHeaders, ...options }: RequestOptions = {}
    ) {
        const response = await this.http.patch<TData>(endpoint, data, {
            ...options,
            headers: {
                ...this.authStrategy(apiKey),
                ...extraHeaders
            }
        });

        return response;
    }

    protected async delete<TData = any>(
        endpoint: string,
        apiKey?: string,
        { headers: extraHeaders, ...options }: RequestOptions = {}
    ) {
        const response = await this.http.delete<TData>(endpoint, {
            ...options,
            headers: {
                ...this.authStrategy(apiKey),
                ...extraHeaders
            }
        });

        return response;
    }

    //#endregion Raw HTTP Methods

    //#region Auth

    /**
     * Generate an access token for a ChatHQ account that can be used to
     * call the ChatHQ Portal API from an app client.
     *
     * @param userSsoToken An SSO token generated by the ChatHQ Portal API.
     * @param scope (Optional) A list of scopes to request access to. Defaults to all scopes.
     */
    async generateAccessToken(userSsoToken: string, scope = APP_SCOPES_ALL) {
        let accountId: string;
        try {
            const [, payload] = userSsoToken.split('.');
            const { accountId: accountIdHex } = parseBase64Object(payload);
            accountId = hexToBase64Url(accountIdHex);
        } catch (err) {
            throw new Error('Invalid user SSO token');
        }

        const { data } = await this.post<GenerateAccessTokenResponse>(
            `/accounts/${accountId}/sso`,
            userSsoToken,
            {
                clientId: this.appClientId,
                clientSecret: this.appClientSecret,
                scope
            }
        );

        const result: GenerateAccessTokenResult = {
            ...data,
            accountId
        };
        return result;
    }

    //#endregion Authorization
}
